# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from .migration_status import MigrationStatus


class Migration(pydantic.BaseModel):
    name: str
    status: MigrationStatus

    class Partial(typing_extensions.TypedDict):
        name: typing_extensions.NotRequired[str]
        status: typing_extensions.NotRequired[MigrationStatus]

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @Migration.Validators.root
            def validate(values: Migration.Partial) -> Migration.Partial:
                ...

            @Migration.Validators.field("name")
            def validate_name(name: str, values: Migration.Partial) -> str:
                ...

            @Migration.Validators.field("status")
            def validate_status(status: MigrationStatus, values: Migration.Partial) -> MigrationStatus:
                ...
        """

        _validators: typing.ClassVar[typing.List[typing.Callable[[Migration.Partial], Migration.Partial]]] = []
        _name_validators: typing.ClassVar[typing.List[Migration.Validators.NameValidator]] = []
        _status_validators: typing.ClassVar[typing.List[Migration.Validators.StatusValidator]] = []

        @classmethod
        def root(
            cls, validator: typing.Callable[[Migration.Partial], Migration.Partial]
        ) -> typing.Callable[[Migration.Partial], Migration.Partial]:
            cls._validators.append(validator)
            return validator

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["name"]
        ) -> typing.Callable[[Migration.Validators.NameValidator], Migration.Validators.NameValidator]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["status"]
        ) -> typing.Callable[[Migration.Validators.StatusValidator], Migration.Validators.StatusValidator]:
            ...

        @classmethod
        def field(cls, field_name: str) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "name":
                    cls._name_validators.append(validator)
                if field_name == "status":
                    cls._status_validators.append(validator)
                return validator

            return decorator

        class NameValidator(typing_extensions.Protocol):
            def __call__(self, name: str, *, values: Migration.Partial) -> str:
                ...

        class StatusValidator(typing_extensions.Protocol):
            def __call__(self, status: MigrationStatus, *, values: Migration.Partial) -> MigrationStatus:
                ...

    @pydantic.root_validator
    def _validate(cls, values: Migration.Partial) -> Migration.Partial:
        for validator in Migration.Validators._validators:
            values = validator(values)
        return values

    @pydantic.validator("name")
    def _validate_name(cls, name: str, values: Migration.Partial) -> str:
        for validator in Migration.Validators._name_validators:
            name = validator(name, values=values)
        return name

    @pydantic.validator("status")
    def _validate_status(cls, status: MigrationStatus, values: Migration.Partial) -> MigrationStatus:
        for validator in Migration.Validators._status_validators:
            status = validator(status, values=values)
        return status

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
