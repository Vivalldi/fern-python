# This file was auto-generated by Fern from our API Definition.

# flake8: noqa
# fmt: off
# isort: skip_file

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from .running_submission_state import RunningSubmissionState
from .submission_id import SubmissionId


class RunningResponse(pydantic.BaseModel):
    submission_id: SubmissionId = pydantic.Field(alias="submissionId")
    state: RunningSubmissionState

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @RunningResponse.Validators.field("submission_id")
            def validate_submission_id(v: SubmissionId, values: RunningResponse.Partial) -> SubmissionId:
                ...

            @RunningResponse.Validators.field("state")
            def validate_state(v: RunningSubmissionState, values: RunningResponse.Partial) -> RunningSubmissionState:
                ...
        """

        _submission_id_validators: typing.ClassVar[typing.List[RunningResponse.Validators.SubmissionIdValidator]] = []
        _state_validators: typing.ClassVar[typing.List[RunningResponse.Validators.StateValidator]] = []

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["submission_id"]
        ) -> typing.Callable[
            [RunningResponse.Validators.SubmissionIdValidator], RunningResponse.Validators.SubmissionIdValidator
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["state"]
        ) -> typing.Callable[[RunningResponse.Validators.StateValidator], RunningResponse.Validators.StateValidator]:
            ...

        @classmethod
        def field(cls, field_name: str) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "submission_id":
                    cls._submission_id_validators.append(validator)
                if field_name == "state":
                    cls._state_validators.append(validator)
                return validator

            return decorator

        class SubmissionIdValidator(typing_extensions.Protocol):
            def __call__(self, v: SubmissionId, *, values: RunningResponse.Partial) -> SubmissionId:
                ...

        class StateValidator(typing_extensions.Protocol):
            def __call__(self, v: RunningSubmissionState, *, values: RunningResponse.Partial) -> RunningSubmissionState:
                ...

    @pydantic.validator("submission_id")
    def _validate_submission_id(cls, v: SubmissionId, values: RunningResponse.Partial) -> SubmissionId:
        for validator in RunningResponse.Validators._submission_id_validators:
            v = validator(v, values=values)
        return v

    @pydantic.validator("state")
    def _validate_state(cls, v: RunningSubmissionState, values: RunningResponse.Partial) -> RunningSubmissionState:
        for validator in RunningResponse.Validators._state_validators:
            v = validator(v, values=values)
        return v

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Partial(typing.TypedDict):
        submission_id: typing_extensions.NotRequired[SubmissionId]
        state: typing_extensions.NotRequired[RunningSubmissionState]

    class Config:
        frozen = True
        allow_population_by_field_name = True
