# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

import pydantic
import typing_extensions

from ...core.datetime_utils import serialize_datetime

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def foo(self, value: str) -> SingleVariantUnionType:
        return SingleVariantUnionType(__root__=_SingleVariantUnionType.Foo(type="foo", value=value))


class SingleVariantUnionType(pydantic.BaseModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    def get_as_union(self) -> _SingleVariantUnionType.Foo:
        return self.__root__

    def visit(self, foo: typing.Callable[[str], T_Result]) -> T_Result:
        if self.__root__.type == "foo":
            return foo(self.__root__.value)

    __root__: _SingleVariantUnionType.Foo

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @SingleVariantUnionType.Validators.validate
            def validate(value: _SingleVariantUnionType.Foo) -> _SingleVariantUnionType.Foo:
                ...
        """

        _validators: typing.ClassVar[
            typing.List[typing.Callable[[_SingleVariantUnionType.Foo], _SingleVariantUnionType.Foo]]
        ] = []

        @classmethod
        def validate(
            cls, validator: typing.Callable[[_SingleVariantUnionType.Foo], _SingleVariantUnionType.Foo]
        ) -> None:
            cls._validators.append(validator)

    @pydantic.root_validator(pre=False)
    def _validate(cls, values: typing.Dict[str, typing.Any]) -> typing.Dict[str, typing.Any]:
        value = typing.cast(_SingleVariantUnionType.Foo, values.get("__root__"))
        for validator in SingleVariantUnionType.Validators._validators:
            value = validator(value)
        return {**values, "__root__": value}

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        json_encoders = {dt.datetime: serialize_datetime}


class _SingleVariantUnionType:
    class Foo(pydantic.BaseModel):
        type: typing_extensions.Literal["foo"]
        value: str


SingleVariantUnionType.update_forward_refs()
