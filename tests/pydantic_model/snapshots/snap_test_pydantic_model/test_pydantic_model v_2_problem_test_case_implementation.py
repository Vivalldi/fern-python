# This file was auto-generated by Fern from our API Definition.

# flake8: noqa
# fmt: off
# isort: skip_file

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from .test_case_function import TestCaseFunction
from .test_case_implementation_description import TestCaseImplementationDescription


class TestCaseImplementation(pydantic.BaseModel):
    description: TestCaseImplementationDescription
    function: TestCaseFunction

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @TestCaseImplementation.Validators.field("description")
            def validate_description(v: TestCaseImplementationDescription, values: TestCaseImplementation.Partial) -> TestCaseImplementationDescription:
                ...

            @TestCaseImplementation.Validators.field("function")
            def validate_function(v: TestCaseFunction, values: TestCaseImplementation.Partial) -> TestCaseFunction:
                ...
        """

        _description_validators: typing.ClassVar[
            typing.List[TestCaseImplementation.Validators.DescriptionValidator]
        ] = []
        _function_validators: typing.ClassVar[typing.List[TestCaseImplementation.Validators.FunctionValidator]] = []

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["description"]
        ) -> typing.Callable[
            [TestCaseImplementation.Validators.DescriptionValidator],
            TestCaseImplementation.Validators.DescriptionValidator,
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["function"]
        ) -> typing.Callable[
            [TestCaseImplementation.Validators.FunctionValidator], TestCaseImplementation.Validators.FunctionValidator
        ]:
            ...

        @classmethod
        def field(cls, field_name: str) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "description":
                    cls._description_validators.append(validator)
                if field_name == "function":
                    cls._function_validators.append(validator)
                return validator

            return decorator

        class DescriptionValidator(typing_extensions.Protocol):
            def __call__(
                self, v: TestCaseImplementationDescription, *, values: TestCaseImplementation.Partial
            ) -> TestCaseImplementationDescription:
                ...

        class FunctionValidator(typing_extensions.Protocol):
            def __call__(self, v: TestCaseFunction, *, values: TestCaseImplementation.Partial) -> TestCaseFunction:
                ...

    @pydantic.validator("description")
    def _validate_description(
        cls, v: TestCaseImplementationDescription, values: TestCaseImplementation.Partial
    ) -> TestCaseImplementationDescription:
        for validator in TestCaseImplementation.Validators._description_validators:
            v = validator(v, values=values)
        return v

    @pydantic.validator("function")
    def _validate_function(cls, v: TestCaseFunction, values: TestCaseImplementation.Partial) -> TestCaseFunction:
        for validator in TestCaseImplementation.Validators._function_validators:
            v = validator(v, values=values)
        return v

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Partial(typing_extensions.TypedDict):
        description: typing_extensions.NotRequired[TestCaseImplementationDescription]
        function: typing_extensions.NotRequired[TestCaseFunction]

    class Config:
        frozen = True
