# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions


class TerminatedResponse(pydantic.BaseModel):
    class Partial(typing_extensions.TypedDict):
        pass

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @TerminatedResponse.Validators.root
            def validate(values: TerminatedResponse.Partial) -> TerminatedResponse.Partial:
                ...
        """

        _validators: typing.ClassVar[
            typing.List[typing.Callable[[TerminatedResponse.Partial], TerminatedResponse.Partial]]
        ] = []

        @classmethod
        def root(
            cls, validator: typing.Callable[[TerminatedResponse.Partial], TerminatedResponse.Partial]
        ) -> typing.Callable[[TerminatedResponse.Partial], TerminatedResponse.Partial]:
            cls._validators.append(validator)
            return validator

    @pydantic.root_validator
    def _validate(cls, values: TerminatedResponse.Partial) -> TerminatedResponse.Partial:
        for validator in TerminatedResponse.Validators._validators:
            values = validator(values)
        return values

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
