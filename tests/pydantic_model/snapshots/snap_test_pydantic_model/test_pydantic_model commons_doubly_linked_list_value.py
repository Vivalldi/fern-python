# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from .doubly_linked_list_node_value import DoublyLinkedListNodeValue
from .node_id import NodeId


class DoublyLinkedListValue(pydantic.BaseModel):
    head: typing.Optional[NodeId]
    nodes: typing.Dict[NodeId, DoublyLinkedListNodeValue]

    class Partial(typing_extensions.TypedDict):
        head: typing_extensions.NotRequired[typing.Optional[NodeId]]
        nodes: typing_extensions.NotRequired[typing.Dict[NodeId, DoublyLinkedListNodeValue]]

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @DoublyLinkedListValue.Validators.root
            def validate(values: DoublyLinkedListValue.Partial) -> DoublyLinkedListValue.Partial:
                ...

            @DoublyLinkedListValue.Validators.field("head")
            def validate_head(head: typing.Optional[NodeId], values: DoublyLinkedListValue.Partial) -> typing.Optional[NodeId]:
                ...

            @DoublyLinkedListValue.Validators.field("nodes")
            def validate_nodes(nodes: typing.Dict[NodeId, DoublyLinkedListNodeValue], values: DoublyLinkedListValue.Partial) -> typing.Dict[NodeId, DoublyLinkedListNodeValue]:
                ...
        """

        _validators: typing.ClassVar[
            typing.List[typing.Callable[[DoublyLinkedListValue.Partial], DoublyLinkedListValue.Partial]]
        ] = []
        _head_validators: typing.ClassVar[typing.List[DoublyLinkedListValue.Validators.HeadValidator]] = []
        _nodes_validators: typing.ClassVar[typing.List[DoublyLinkedListValue.Validators.NodesValidator]] = []

        @classmethod
        def root(
            cls, validator: typing.Callable[[DoublyLinkedListValue.Partial], DoublyLinkedListValue.Partial]
        ) -> typing.Callable[[DoublyLinkedListValue.Partial], DoublyLinkedListValue.Partial]:
            cls._validators.append(validator)
            return validator

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["head"]
        ) -> typing.Callable[
            [DoublyLinkedListValue.Validators.HeadValidator], DoublyLinkedListValue.Validators.HeadValidator
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["nodes"]
        ) -> typing.Callable[
            [DoublyLinkedListValue.Validators.NodesValidator], DoublyLinkedListValue.Validators.NodesValidator
        ]:
            ...

        @classmethod
        def field(cls, field_name: str) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "head":
                    cls._head_validators.append(validator)
                if field_name == "nodes":
                    cls._nodes_validators.append(validator)
                return validator

            return decorator

        class HeadValidator(typing_extensions.Protocol):
            def __call__(
                self, *, head: typing.Optional[NodeId], values: DoublyLinkedListValue.Partial
            ) -> typing.Optional[NodeId]:
                ...

        class NodesValidator(typing_extensions.Protocol):
            def __call__(
                self, *, nodes: typing.Dict[NodeId, DoublyLinkedListNodeValue], values: DoublyLinkedListValue.Partial
            ) -> typing.Dict[NodeId, DoublyLinkedListNodeValue]:
                ...

    @pydantic.root_validator
    def _validate(cls, values: DoublyLinkedListValue.Partial) -> DoublyLinkedListValue.Partial:
        for validator in DoublyLinkedListValue.Validators._validators:
            values = validator(values)
        return values

    @pydantic.validator("head")
    def _validate_head(
        cls, head: typing.Optional[NodeId], values: DoublyLinkedListValue.Partial
    ) -> typing.Optional[NodeId]:
        for validator in DoublyLinkedListValue.Validators._head_validators:
            head = validator(head, values=values)
        return head

    @pydantic.validator("nodes")
    def _validate_nodes(
        cls, nodes: typing.Dict[NodeId, DoublyLinkedListNodeValue], values: DoublyLinkedListValue.Partial
    ) -> typing.Dict[NodeId, DoublyLinkedListNodeValue]:
        for validator in DoublyLinkedListValue.Validators._nodes_validators:
            nodes = validator(nodes, values=values)
        return nodes

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
