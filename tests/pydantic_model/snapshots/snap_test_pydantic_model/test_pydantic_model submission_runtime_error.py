# This file was auto-generated by Fern from our API Definition.

# type: ignore
# flake8: noqa
# fmt: off
# isort: skip_file

from __future__ import annotations

import typing

import pydantic
import typing_extensions


class RuntimeError(pydantic.BaseModel):
    message: str

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @RuntimeError.Validators.field("message")
            def validate_message(v: str, values: RuntimeError.Partial) -> str:
                ...
        """

        _message_validators: typing.ClassVar[typing.List[RuntimeError.Validators.MessageValidator]] = []

        @typing.overload  # type: ignore
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["message"]
        ) -> typing.Callable[[RuntimeError.Validators.MessageValidator], RuntimeError.Validators.MessageValidator]:
            ...

        @classmethod
        def field(cls, field_name: str) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "message":
                    cls._message_validators.append(validator)
                return validator

            return decorator

        class MessageValidator(typing_extensions.Protocol):
            def __call__(self, v: str, *, values: RuntimeError.Partial) -> str:
                ...

    @pydantic.validator("message")
    def _validate_message(cls, v: str, values: str) -> str:
        for validator in RuntimeError.Validators._message_validators:
            v = validator(v, values=values)
        return v

    class Partial(typing.TypedDict):
        message: typing_extensions.NotRequired[str]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
