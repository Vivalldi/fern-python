# This file was auto-generated by Fern from our API Definition.

# type: ignore
# flake8: noqa
# fmt: off
# isort: skip_file

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from .binary_tree_node_value import BinaryTreeNodeValue
from .node_id import NodeId


class BinaryTreeValue(pydantic.BaseModel):
    root: typing.Optional[NodeId]
    nodes: typing.Dict[NodeId, BinaryTreeNodeValue]

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @BinaryTreeValue.Validators.field("root")
            def validate_root(v: typing.Optional[NodeId], values: BinaryTreeValue.Partial) -> typing.Optional[NodeId]:
                ...

            @BinaryTreeValue.Validators.field("nodes")
            def validate_nodes(v: typing.Dict[NodeId, BinaryTreeNodeValue], values: BinaryTreeValue.Partial) -> typing.Dict[NodeId, BinaryTreeNodeValue]:
                ...
        """

        _root_validators: typing.ClassVar[typing.List[BinaryTreeValue.Validators.RootValidator]] = []
        _nodes_validators: typing.ClassVar[typing.List[BinaryTreeValue.Validators.NodesValidator]] = []

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["root"]
        ) -> typing.Callable[[BinaryTreeValue.Validators.RootValidator], BinaryTreeValue.Validators.RootValidator]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["nodes"]
        ) -> typing.Callable[[BinaryTreeValue.Validators.NodesValidator], BinaryTreeValue.Validators.NodesValidator]:
            ...

        @classmethod
        def field(cls, field_name: str) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "root":
                    cls._root_validators.append(validator)
                if field_name == "nodes":
                    cls._nodes_validators.append(validator)
                return validator

            return decorator

        class RootValidator(typing_extensions.Protocol):
            def __call__(
                self, v: typing.Optional[NodeId], *, values: BinaryTreeValue.Partial
            ) -> typing.Optional[NodeId]:
                ...

        class NodesValidator(typing_extensions.Protocol):
            def __call__(
                self, v: typing.Dict[NodeId, BinaryTreeNodeValue], *, values: BinaryTreeValue.Partial
            ) -> typing.Dict[NodeId, BinaryTreeNodeValue]:
                ...

    @pydantic.validator("root")
    def _validate_root(cls, v: typing.Optional[NodeId], values: typing.Optional[NodeId]) -> typing.Optional[NodeId]:
        for validator in BinaryTreeValue.Validators._root_validators:
            v = validator(v, values=values)
        return v

    @pydantic.validator("nodes")
    def _validate_nodes(
        cls, v: typing.Dict[NodeId, BinaryTreeNodeValue], values: typing.Dict[NodeId, BinaryTreeNodeValue]
    ) -> typing.Dict[NodeId, BinaryTreeNodeValue]:
        for validator in BinaryTreeValue.Validators._nodes_validators:
            v = validator(v, values=values)
        return v

    class Partial(typing.TypedDict):
        root: typing_extensions.NotRequired[typing.Optional[NodeId]]
        nodes: typing_extensions.NotRequired[typing.Dict[NodeId, BinaryTreeNodeValue]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
