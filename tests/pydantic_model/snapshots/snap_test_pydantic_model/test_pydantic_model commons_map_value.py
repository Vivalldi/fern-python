# This file was auto-generated by Fern from our API Definition.

# flake8: noqa
# fmt: off
# isort: skip_file

from __future__ import annotations

import typing

import pydantic
import typing_extensions


class MapValue(pydantic.BaseModel):
    key_value_pairs: typing.List[KeyValuePair] = pydantic.Field(alias="keyValuePairs")

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @MapValue.Validators.field("key_value_pairs")
            def validate_key_value_pairs(v: typing.List[KeyValuePair], values: MapValue.Partial) -> typing.List[KeyValuePair]:
                ...
        """

        _key_value_pairs_validators: typing.ClassVar[typing.List[MapValue.Validators.KeyValuePairsValidator]] = []

        @typing.overload  # type: ignore
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["key_value_pairs"]
        ) -> typing.Callable[[MapValue.Validators.KeyValuePairsValidator], MapValue.Validators.KeyValuePairsValidator]:
            ...

        @classmethod
        def field(cls, field_name: str) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "key_value_pairs":
                    cls._key_value_pairs_validators.append(validator)
                return validator

            return decorator

        class KeyValuePairsValidator(typing_extensions.Protocol):
            def __call__(self, v: typing.List[KeyValuePair], *, values: MapValue.Partial) -> typing.List[KeyValuePair]:
                ...

    @pydantic.validator("key_value_pairs")
    def _validate_key_value_pairs(
        cls, v: typing.List[KeyValuePair], values: MapValue.Partial
    ) -> typing.List[KeyValuePair]:
        for validator in MapValue.Validators._key_value_pairs_validators:
            v = validator(v, values=values)
        return v

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Partial(typing.TypedDict):
        key_value_pairs: typing_extensions.NotRequired[typing.List[KeyValuePair]]

    class Config:
        frozen = True
        allow_population_by_field_name = True


from .key_value_pair import KeyValuePair  # noqa: E402

MapValue.update_forward_refs()
