# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from .node_id import NodeId


class BinaryTreeNodeValue(pydantic.BaseModel):
    node_id: NodeId = pydantic.Field(alias="nodeId")
    val: float
    right: typing.Optional[NodeId]
    left: typing.Optional[NodeId]

    class Partial(typing_extensions.TypedDict):
        node_id: typing_extensions.NotRequired[NodeId]
        val: typing_extensions.NotRequired[float]
        right: typing_extensions.NotRequired[typing.Optional[NodeId]]
        left: typing_extensions.NotRequired[typing.Optional[NodeId]]

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @BinaryTreeNodeValue.Validators.root()
            def validate(values: BinaryTreeNodeValue.Partial) -> BinaryTreeNodeValue.Partial:
                ...

            @BinaryTreeNodeValue.Validators.field("node_id")
            def validate_node_id(node_id: NodeId, values: BinaryTreeNodeValue.Partial) -> NodeId:
                ...

            @BinaryTreeNodeValue.Validators.field("val")
            def validate_val(val: float, values: BinaryTreeNodeValue.Partial) -> float:
                ...

            @BinaryTreeNodeValue.Validators.field("right")
            def validate_right(right: typing.Optional[NodeId], values: BinaryTreeNodeValue.Partial) -> typing.Optional[NodeId]:
                ...

            @BinaryTreeNodeValue.Validators.field("left")
            def validate_left(left: typing.Optional[NodeId], values: BinaryTreeNodeValue.Partial) -> typing.Optional[NodeId]:
                ...
        """

        _pre_validators: typing.ClassVar[typing.List[BinaryTreeNodeValue.Validators._RootValidator]] = []
        _post_validators: typing.ClassVar[typing.List[BinaryTreeNodeValue.Validators._RootValidator]] = []
        _node_id_pre_validators: typing.ClassVar[typing.List[BinaryTreeNodeValue.Validators.PreNodeIdValidator]] = []
        _node_id_post_validators: typing.ClassVar[typing.List[BinaryTreeNodeValue.Validators.NodeIdValidator]] = []
        _val_pre_validators: typing.ClassVar[typing.List[BinaryTreeNodeValue.Validators.PreValValidator]] = []
        _val_post_validators: typing.ClassVar[typing.List[BinaryTreeNodeValue.Validators.ValValidator]] = []
        _right_pre_validators: typing.ClassVar[typing.List[BinaryTreeNodeValue.Validators.PreRightValidator]] = []
        _right_post_validators: typing.ClassVar[typing.List[BinaryTreeNodeValue.Validators.RightValidator]] = []
        _left_pre_validators: typing.ClassVar[typing.List[BinaryTreeNodeValue.Validators.PreLeftValidator]] = []
        _left_post_validators: typing.ClassVar[typing.List[BinaryTreeNodeValue.Validators.LeftValidator]] = []

        @classmethod
        def root(
            cls, *, pre: bool = False
        ) -> typing.Callable[
            [BinaryTreeNodeValue.Validators._RootValidator], BinaryTreeNodeValue.Validators._RootValidator
        ]:
            def decorator(
                validator: BinaryTreeNodeValue.Validators._RootValidator,
            ) -> BinaryTreeNodeValue.Validators._RootValidator:
                if pre:
                    cls._pre_validators.append(validator)
                else:
                    cls._post_validators.append(validator)
                return validator

            return decorator

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["node_id"], *, pre: typing_extensions.Literal[True]
        ) -> typing.Callable[
            [BinaryTreeNodeValue.Validators.PreNodeIdValidator], BinaryTreeNodeValue.Validators.PreNodeIdValidator
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["node_id"], *, pre: typing_extensions.Literal[False] = False
        ) -> typing.Callable[
            [BinaryTreeNodeValue.Validators.NodeIdValidator], BinaryTreeNodeValue.Validators.NodeIdValidator
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["val"], *, pre: typing_extensions.Literal[True]
        ) -> typing.Callable[
            [BinaryTreeNodeValue.Validators.PreValValidator], BinaryTreeNodeValue.Validators.PreValValidator
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["val"], *, pre: typing_extensions.Literal[False] = False
        ) -> typing.Callable[
            [BinaryTreeNodeValue.Validators.ValValidator], BinaryTreeNodeValue.Validators.ValValidator
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["right"], *, pre: typing_extensions.Literal[True]
        ) -> typing.Callable[
            [BinaryTreeNodeValue.Validators.PreRightValidator], BinaryTreeNodeValue.Validators.PreRightValidator
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["right"], *, pre: typing_extensions.Literal[False] = False
        ) -> typing.Callable[
            [BinaryTreeNodeValue.Validators.RightValidator], BinaryTreeNodeValue.Validators.RightValidator
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["left"], *, pre: typing_extensions.Literal[True]
        ) -> typing.Callable[
            [BinaryTreeNodeValue.Validators.PreLeftValidator], BinaryTreeNodeValue.Validators.PreLeftValidator
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["left"], *, pre: typing_extensions.Literal[False] = False
        ) -> typing.Callable[
            [BinaryTreeNodeValue.Validators.LeftValidator], BinaryTreeNodeValue.Validators.LeftValidator
        ]:
            ...

        @classmethod
        def field(cls, field_name: str, *, pre: bool = False) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "node_id":
                    if pre:
                        cls._node_id_pre_validators.append(validator)
                    else:
                        cls._node_id_post_validators.append(validator)
                if field_name == "val":
                    if pre:
                        cls._val_pre_validators.append(validator)
                    else:
                        cls._val_post_validators.append(validator)
                if field_name == "right":
                    if pre:
                        cls._right_pre_validators.append(validator)
                    else:
                        cls._right_post_validators.append(validator)
                if field_name == "left":
                    if pre:
                        cls._left_pre_validators.append(validator)
                    else:
                        cls._left_post_validators.append(validator)
                return validator

            return decorator

        class PreNodeIdValidator(typing_extensions.Protocol):
            def __call__(self, __v: typing.Any, __values: BinaryTreeNodeValue.Partial) -> typing.Any:
                ...

        class NodeIdValidator(typing_extensions.Protocol):
            def __call__(self, __v: NodeId, __values: BinaryTreeNodeValue.Partial) -> NodeId:
                ...

        class PreValValidator(typing_extensions.Protocol):
            def __call__(self, __v: typing.Any, __values: BinaryTreeNodeValue.Partial) -> typing.Any:
                ...

        class ValValidator(typing_extensions.Protocol):
            def __call__(self, __v: float, __values: BinaryTreeNodeValue.Partial) -> float:
                ...

        class PreRightValidator(typing_extensions.Protocol):
            def __call__(self, __v: typing.Any, __values: BinaryTreeNodeValue.Partial) -> typing.Any:
                ...

        class RightValidator(typing_extensions.Protocol):
            def __call__(
                self, __v: typing.Optional[NodeId], __values: BinaryTreeNodeValue.Partial
            ) -> typing.Optional[NodeId]:
                ...

        class PreLeftValidator(typing_extensions.Protocol):
            def __call__(self, __v: typing.Any, __values: BinaryTreeNodeValue.Partial) -> typing.Any:
                ...

        class LeftValidator(typing_extensions.Protocol):
            def __call__(
                self, __v: typing.Optional[NodeId], __values: BinaryTreeNodeValue.Partial
            ) -> typing.Optional[NodeId]:
                ...

        class _RootValidator(typing_extensions.Protocol):
            def __call__(self, __values: BinaryTreeNodeValue.Partial) -> BinaryTreeNodeValue.Partial:
                ...

    @pydantic.root_validator(pre=True)
    def _pre_validate(cls, values: BinaryTreeNodeValue.Partial) -> BinaryTreeNodeValue.Partial:
        for validator in BinaryTreeNodeValue.Validators._pre_validators:
            values = validator(values)
        return values

    @pydantic.root_validator(pre=False)
    def _post_validate(cls, values: BinaryTreeNodeValue.Partial) -> BinaryTreeNodeValue.Partial:
        for validator in BinaryTreeNodeValue.Validators._post_validators:
            values = validator(values)
        return values

    @pydantic.validator("node_id", pre=True)
    def _pre_validate_node_id(cls, v: NodeId, values: BinaryTreeNodeValue.Partial) -> NodeId:
        for validator in BinaryTreeNodeValue.Validators._node_id_pre_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("node_id", pre=False)
    def _post_validate_node_id(cls, v: NodeId, values: BinaryTreeNodeValue.Partial) -> NodeId:
        for validator in BinaryTreeNodeValue.Validators._node_id_post_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("val", pre=True)
    def _pre_validate_val(cls, v: float, values: BinaryTreeNodeValue.Partial) -> float:
        for validator in BinaryTreeNodeValue.Validators._val_pre_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("val", pre=False)
    def _post_validate_val(cls, v: float, values: BinaryTreeNodeValue.Partial) -> float:
        for validator in BinaryTreeNodeValue.Validators._val_post_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("right", pre=True)
    def _pre_validate_right(
        cls, v: typing.Optional[NodeId], values: BinaryTreeNodeValue.Partial
    ) -> typing.Optional[NodeId]:
        for validator in BinaryTreeNodeValue.Validators._right_pre_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("right", pre=False)
    def _post_validate_right(
        cls, v: typing.Optional[NodeId], values: BinaryTreeNodeValue.Partial
    ) -> typing.Optional[NodeId]:
        for validator in BinaryTreeNodeValue.Validators._right_post_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("left", pre=True)
    def _pre_validate_left(
        cls, v: typing.Optional[NodeId], values: BinaryTreeNodeValue.Partial
    ) -> typing.Optional[NodeId]:
        for validator in BinaryTreeNodeValue.Validators._left_pre_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("left", pre=False)
    def _post_validate_left(
        cls, v: typing.Optional[NodeId], values: BinaryTreeNodeValue.Partial
    ) -> typing.Optional[NodeId]:
        for validator in BinaryTreeNodeValue.Validators._left_post_validators:
            v = validator(v, values)
        return v

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
