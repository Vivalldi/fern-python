# This file was auto-generated by Fern from our API Definition.

# flake8: noqa
# fmt: off
# isort: skip_file

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from .submission_id import SubmissionId
from .workspace_run_details import WorkspaceRunDetails


class WorkspaceRanResponse(pydantic.BaseModel):
    submission_id: SubmissionId = pydantic.Field(alias="submissionId")
    run_details: WorkspaceRunDetails = pydantic.Field(alias="runDetails")

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @WorkspaceRanResponse.Validators.field("submission_id")
            def validate_submission_id(v: SubmissionId, values: WorkspaceRanResponse.Partial) -> SubmissionId:
                ...

            @WorkspaceRanResponse.Validators.field("run_details")
            def validate_run_details(v: WorkspaceRunDetails, values: WorkspaceRanResponse.Partial) -> WorkspaceRunDetails:
                ...
        """

        _submission_id_validators: typing.ClassVar[
            typing.List[WorkspaceRanResponse.Validators.SubmissionIdValidator]
        ] = []
        _run_details_validators: typing.ClassVar[typing.List[WorkspaceRanResponse.Validators.RunDetailsValidator]] = []

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["submission_id"]
        ) -> typing.Callable[
            [WorkspaceRanResponse.Validators.SubmissionIdValidator],
            WorkspaceRanResponse.Validators.SubmissionIdValidator,
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["run_details"]
        ) -> typing.Callable[
            [WorkspaceRanResponse.Validators.RunDetailsValidator], WorkspaceRanResponse.Validators.RunDetailsValidator
        ]:
            ...

        @classmethod
        def field(cls, field_name: str) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "submission_id":
                    cls._submission_id_validators.append(validator)
                if field_name == "run_details":
                    cls._run_details_validators.append(validator)
                return validator

            return decorator

        class SubmissionIdValidator(typing_extensions.Protocol):
            def __call__(self, v: SubmissionId, *, values: WorkspaceRanResponse.Partial) -> SubmissionId:
                ...

        class RunDetailsValidator(typing_extensions.Protocol):
            def __call__(self, v: WorkspaceRunDetails, *, values: WorkspaceRanResponse.Partial) -> WorkspaceRunDetails:
                ...

    @pydantic.validator("submission_id")
    def _validate_submission_id(cls, v: SubmissionId, values: WorkspaceRanResponse.Partial) -> SubmissionId:
        for validator in WorkspaceRanResponse.Validators._submission_id_validators:
            v = validator(v, values=values)
        return v

    @pydantic.validator("run_details")
    def _validate_run_details(cls, v: WorkspaceRunDetails, values: WorkspaceRanResponse.Partial) -> WorkspaceRunDetails:
        for validator in WorkspaceRanResponse.Validators._run_details_validators:
            v = validator(v, values=values)
        return v

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Partial(typing.TypedDict):
        submission_id: typing_extensions.NotRequired[SubmissionId]
        run_details: typing_extensions.NotRequired[WorkspaceRunDetails]

    class Config:
        frozen = True
        allow_population_by_field_name = True
