# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from ...commons.language import Language
from ...commons.list_type import ListType
from ...commons.map_type import MapType
from ...commons.variable_type import VariableType
from .assert_correctness_check import AssertCorrectnessCheck
from .deep_equality_correctness_check import DeepEqualityCorrectnessCheck
from .function_implementation import FunctionImplementation
from .function_implementation_for_multiple_languages import FunctionImplementationForMultipleLanguages
from .non_void_function_definition import NonVoidFunctionDefinition
from .non_void_function_signature import NonVoidFunctionSignature
from .parameter import Parameter
from .parameter_id import ParameterId
from .test_case_function import TestCaseFunction
from .test_case_implementation import TestCaseImplementation
from .test_case_implementation_description import TestCaseImplementationDescription
from .test_case_implementation_description_board import TestCaseImplementationDescriptionBoard
from .test_case_template_id import TestCaseTemplateId
from .test_case_with_actual_result_implementation import TestCaseWithActualResultImplementation
from .void_function_definition import VoidFunctionDefinition
from .void_function_definition_that_takes_actual_result import VoidFunctionDefinitionThatTakesActualResult

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def template_id(self, value: TestCaseTemplateId) -> TestCaseImplementationReference:
        return TestCaseImplementationReference(
            __root__=_TestCaseImplementationReference.TemplateId(type="templateId", value=value)
        )

    def implementation(self, value: TestCaseImplementation) -> TestCaseImplementationReference:
        return TestCaseImplementationReference(
            __root__=_TestCaseImplementationReference.Implementation(**dict(value), type="implementation")
        )


class TestCaseImplementationReference(pydantic.BaseModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    def get_as_union(
        self,
    ) -> typing.Union[_TestCaseImplementationReference.TemplateId, _TestCaseImplementationReference.Implementation]:
        return self.__root__

    def visit(
        self,
        template_id: typing.Callable[[TestCaseTemplateId], T_Result],
        implementation: typing.Callable[[TestCaseImplementation], T_Result],
    ) -> T_Result:
        if self.__root__.type == "templateId":
            return template_id(self.__root__.value)
        if self.__root__.type == "implementation":
            return implementation(self.__root__)

    __root__: typing_extensions.Annotated[
        typing.Union[_TestCaseImplementationReference.TemplateId, _TestCaseImplementationReference.Implementation],
        pydantic.Field(discriminator="type"),
    ]

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @TestCaseImplementationReference.Validators.validate
            def validate(value: typing.Union[_TestCaseImplementationReference.TemplateId, _TestCaseImplementationReference.Implementation]) -> typing.Union[_TestCaseImplementationReference.TemplateId, _TestCaseImplementationReference.Implementation]:
                ...
        """

        _validators: typing.ClassVar[
            typing.List[
                typing.Callable[
                    [
                        typing.Union[
                            _TestCaseImplementationReference.TemplateId, _TestCaseImplementationReference.Implementation
                        ]
                    ],
                    typing.Union[
                        _TestCaseImplementationReference.TemplateId, _TestCaseImplementationReference.Implementation
                    ],
                ]
            ]
        ] = []

        @classmethod
        def validate(
            cls,
            validator: typing.Callable[
                [
                    typing.Union[
                        _TestCaseImplementationReference.TemplateId, _TestCaseImplementationReference.Implementation
                    ]
                ],
                typing.Union[
                    _TestCaseImplementationReference.TemplateId, _TestCaseImplementationReference.Implementation
                ],
            ],
        ) -> None:
            cls._validators.append(validator)

    @pydantic.root_validator(pre=False)
    def _validate(cls, values: typing.Dict[str, typing.Any]) -> typing.Dict[str, typing.Any]:
        value = typing.cast(
            typing.Union[_TestCaseImplementationReference.TemplateId, _TestCaseImplementationReference.Implementation],
            values.get("__root__"),
        )
        for validator in TestCaseImplementationReference.Validators._validators:
            value = validator(value)
        return {**values, "__root__": value}

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True


class _TestCaseImplementationReference:
    class TemplateId(pydantic.BaseModel):
        type: typing_extensions.Literal["templateId"]
        value: TestCaseTemplateId

        class Config:
            frozen = True

    class Implementation(TestCaseImplementation):
        type: typing_extensions.Literal["implementation"]

        class Config:
            frozen = True


_TestCaseImplementationReference.Implementation.update_forward_refs(
    TestCaseImplementationDescription=TestCaseImplementationDescription,
    TestCaseImplementationDescriptionBoard=TestCaseImplementationDescriptionBoard,
    ParameterId=ParameterId,
    TestCaseFunction=TestCaseFunction,
    TestCaseWithActualResultImplementation=TestCaseWithActualResultImplementation,
    NonVoidFunctionDefinition=NonVoidFunctionDefinition,
    NonVoidFunctionSignature=NonVoidFunctionSignature,
    Parameter=Parameter,
    VariableType=VariableType,
    ListType=ListType,
    MapType=MapType,
    FunctionImplementationForMultipleLanguages=FunctionImplementationForMultipleLanguages,
    Language=Language,
    FunctionImplementation=FunctionImplementation,
    AssertCorrectnessCheck=AssertCorrectnessCheck,
    DeepEqualityCorrectnessCheck=DeepEqualityCorrectnessCheck,
    VoidFunctionDefinitionThatTakesActualResult=VoidFunctionDefinitionThatTakesActualResult,
    VoidFunctionDefinition=VoidFunctionDefinition,
)
TestCaseImplementationReference.update_forward_refs()
