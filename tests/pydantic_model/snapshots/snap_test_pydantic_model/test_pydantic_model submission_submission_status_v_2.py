# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from ..commons.binary_tree_node_value import BinaryTreeNodeValue
from ..commons.binary_tree_value import BinaryTreeValue
from ..commons.doubly_linked_list_node_value import DoublyLinkedListNodeValue
from ..commons.doubly_linked_list_value import DoublyLinkedListValue
from ..commons.key_value_pair import KeyValuePair
from ..commons.language import Language
from ..commons.list_type import ListType
from ..commons.map_type import MapType
from ..commons.map_value import MapValue
from ..commons.node_id import NodeId
from ..commons.problem_id import ProblemId
from ..commons.singly_linked_list_node_value import SinglyLinkedListNodeValue
from ..commons.singly_linked_list_value import SinglyLinkedListValue
from ..commons.variable_type import VariableType
from ..commons.variable_value import VariableValue
from ..problem.problem_description import ProblemDescription
from ..problem.problem_description_board import ProblemDescriptionBoard
from ..v_2.problem.assert_correctness_check import AssertCorrectnessCheck
from ..v_2.problem.basic_custom_files import BasicCustomFiles
from ..v_2.problem.basic_test_case_template import BasicTestCaseTemplate
from ..v_2.problem.custom_files import CustomFiles
from ..v_2.problem.deep_equality_correctness_check import DeepEqualityCorrectnessCheck
from ..v_2.problem.file_info_v_2 import FileInfoV2
from ..v_2.problem.files import Files
from ..v_2.problem.function_implementation import FunctionImplementation
from ..v_2.problem.function_implementation_for_multiple_languages import FunctionImplementationForMultipleLanguages
from ..v_2.problem.generated_files import GeneratedFiles
from ..v_2.problem.non_void_function_definition import NonVoidFunctionDefinition
from ..v_2.problem.non_void_function_signature import NonVoidFunctionSignature
from ..v_2.problem.parameter import Parameter
from ..v_2.problem.parameter_id import ParameterId
from ..v_2.problem.problem_info_v_2 import ProblemInfoV2
from ..v_2.problem.test_case_expects import TestCaseExpects
from ..v_2.problem.test_case_function import TestCaseFunction
from ..v_2.problem.test_case_id import TestCaseId
from ..v_2.problem.test_case_implementation import TestCaseImplementation
from ..v_2.problem.test_case_implementation_description import TestCaseImplementationDescription
from ..v_2.problem.test_case_implementation_description_board import TestCaseImplementationDescriptionBoard
from ..v_2.problem.test_case_implementation_reference import TestCaseImplementationReference
from ..v_2.problem.test_case_metadata import TestCaseMetadata
from ..v_2.problem.test_case_template import TestCaseTemplate
from ..v_2.problem.test_case_template_id import TestCaseTemplateId
from ..v_2.problem.test_case_v_2 import TestCaseV2
from ..v_2.problem.test_case_with_actual_result_implementation import TestCaseWithActualResultImplementation
from ..v_2.problem.void_function_definition import VoidFunctionDefinition
from ..v_2.problem.void_function_definition_that_takes_actual_result import VoidFunctionDefinitionThatTakesActualResult
from .compile_error import CompileError
from .error_info import ErrorInfo
from .exception_info import ExceptionInfo
from .exception_v_2 import ExceptionV2
from .graded_test_case_update import GradedTestCaseUpdate
from .internal_error import InternalError
from .recorded_test_case_update import RecordedTestCaseUpdate
from .running_submission_state import RunningSubmissionState
from .runtime_error import RuntimeError
from .test_case_grade import TestCaseGrade
from .test_case_hidden_grade import TestCaseHiddenGrade
from .test_case_non_hidden_grade import TestCaseNonHiddenGrade
from .test_submission_status_v_2 import TestSubmissionStatusV2
from .test_submission_update import TestSubmissionUpdate
from .test_submission_update_info import TestSubmissionUpdateInfo
from .workspace_run_details import WorkspaceRunDetails
from .workspace_submission_status_v_2 import WorkspaceSubmissionStatusV2
from .workspace_submission_update import WorkspaceSubmissionUpdate
from .workspace_submission_update_info import WorkspaceSubmissionUpdateInfo
from .workspace_traced_update import WorkspaceTracedUpdate

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def test(self, value: TestSubmissionStatusV2) -> SubmissionStatusV2:
        return SubmissionStatusV2(__root__=_SubmissionStatusV2.Test(**dict(value), type="test"))

    def workspace(self, value: WorkspaceSubmissionStatusV2) -> SubmissionStatusV2:
        return SubmissionStatusV2(__root__=_SubmissionStatusV2.Workspace(**dict(value), type="workspace"))


class SubmissionStatusV2(pydantic.BaseModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    def get_as_union(self) -> typing.Union[_SubmissionStatusV2.Test, _SubmissionStatusV2.Workspace]:
        return self.__root__

    def visit(
        self,
        test: typing.Callable[[TestSubmissionStatusV2], T_Result],
        workspace: typing.Callable[[WorkspaceSubmissionStatusV2], T_Result],
    ) -> T_Result:
        if self.__root__.type == "test":
            return test(self.__root__)
        if self.__root__.type == "workspace":
            return workspace(self.__root__)

    __root__: typing_extensions.Annotated[
        typing.Union[_SubmissionStatusV2.Test, _SubmissionStatusV2.Workspace], pydantic.Field(discriminator="type")
    ]

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @SubmissionStatusV2.Validators.validate
            def validate(value: typing.Union[_SubmissionStatusV2.Test, _SubmissionStatusV2.Workspace]) -> typing.Union[_SubmissionStatusV2.Test, _SubmissionStatusV2.Workspace]:
                ...
        """

        _validators: typing.ClassVar[
            typing.List[
                typing.Callable[
                    [typing.Union[_SubmissionStatusV2.Test, _SubmissionStatusV2.Workspace]],
                    typing.Union[_SubmissionStatusV2.Test, _SubmissionStatusV2.Workspace],
                ]
            ]
        ] = []

        @classmethod
        def validate(
            cls,
            validator: typing.Callable[
                [typing.Union[_SubmissionStatusV2.Test, _SubmissionStatusV2.Workspace]],
                typing.Union[_SubmissionStatusV2.Test, _SubmissionStatusV2.Workspace],
            ],
        ) -> None:
            cls._validators.append(validator)

    @pydantic.root_validator(pre=False)
    def _validate(cls, values: typing.Dict[str, typing.Any]) -> typing.Dict[str, typing.Any]:
        value = typing.cast(
            typing.Union[_SubmissionStatusV2.Test, _SubmissionStatusV2.Workspace], values.get("__root__")
        )
        for validator in SubmissionStatusV2.Validators._validators:
            value = validator(value)
        return {**values, "__root__": value}

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True


class _SubmissionStatusV2:
    class Test(TestSubmissionStatusV2):
        type: typing_extensions.Literal["test"]

        class Config:
            frozen = True

    class Workspace(WorkspaceSubmissionStatusV2):
        type: typing_extensions.Literal["workspace"]

        class Config:
            frozen = True


_SubmissionStatusV2.Test.update_forward_refs(
    TestSubmissionUpdate=TestSubmissionUpdate,
    TestSubmissionUpdateInfo=TestSubmissionUpdateInfo,
    RunningSubmissionState=RunningSubmissionState,
    ErrorInfo=ErrorInfo,
    CompileError=CompileError,
    RuntimeError=RuntimeError,
    InternalError=InternalError,
    ExceptionInfo=ExceptionInfo,
    GradedTestCaseUpdate=GradedTestCaseUpdate,
    TestCaseId=TestCaseId,
    TestCaseGrade=TestCaseGrade,
    TestCaseHiddenGrade=TestCaseHiddenGrade,
    TestCaseNonHiddenGrade=TestCaseNonHiddenGrade,
    VariableValue=VariableValue,
    MapValue=MapValue,
    KeyValuePair=KeyValuePair,
    BinaryTreeValue=BinaryTreeValue,
    NodeId=NodeId,
    BinaryTreeNodeValue=BinaryTreeNodeValue,
    SinglyLinkedListValue=SinglyLinkedListValue,
    SinglyLinkedListNodeValue=SinglyLinkedListNodeValue,
    DoublyLinkedListValue=DoublyLinkedListValue,
    DoublyLinkedListNodeValue=DoublyLinkedListNodeValue,
    ExceptionV2=ExceptionV2,
    RecordedTestCaseUpdate=RecordedTestCaseUpdate,
    ProblemId=ProblemId,
    ProblemInfoV2=ProblemInfoV2,
    ProblemDescription=ProblemDescription,
    ProblemDescriptionBoard=ProblemDescriptionBoard,
    Language=Language,
    CustomFiles=CustomFiles,
    BasicCustomFiles=BasicCustomFiles,
    NonVoidFunctionSignature=NonVoidFunctionSignature,
    Parameter=Parameter,
    ParameterId=ParameterId,
    VariableType=VariableType,
    ListType=ListType,
    MapType=MapType,
    Files=Files,
    FileInfoV2=FileInfoV2,
    BasicTestCaseTemplate=BasicTestCaseTemplate,
    TestCaseTemplateId=TestCaseTemplateId,
    TestCaseImplementationDescription=TestCaseImplementationDescription,
    TestCaseImplementationDescriptionBoard=TestCaseImplementationDescriptionBoard,
    GeneratedFiles=GeneratedFiles,
    TestCaseTemplate=TestCaseTemplate,
    TestCaseImplementation=TestCaseImplementation,
    TestCaseFunction=TestCaseFunction,
    TestCaseWithActualResultImplementation=TestCaseWithActualResultImplementation,
    NonVoidFunctionDefinition=NonVoidFunctionDefinition,
    FunctionImplementationForMultipleLanguages=FunctionImplementationForMultipleLanguages,
    FunctionImplementation=FunctionImplementation,
    AssertCorrectnessCheck=AssertCorrectnessCheck,
    DeepEqualityCorrectnessCheck=DeepEqualityCorrectnessCheck,
    VoidFunctionDefinitionThatTakesActualResult=VoidFunctionDefinitionThatTakesActualResult,
    VoidFunctionDefinition=VoidFunctionDefinition,
    TestCaseV2=TestCaseV2,
    TestCaseMetadata=TestCaseMetadata,
    TestCaseImplementationReference=TestCaseImplementationReference,
    TestCaseExpects=TestCaseExpects,
)
_SubmissionStatusV2.Workspace.update_forward_refs(
    WorkspaceSubmissionUpdate=WorkspaceSubmissionUpdate,
    WorkspaceSubmissionUpdateInfo=WorkspaceSubmissionUpdateInfo,
    RunningSubmissionState=RunningSubmissionState,
    WorkspaceRunDetails=WorkspaceRunDetails,
    ExceptionV2=ExceptionV2,
    ExceptionInfo=ExceptionInfo,
    WorkspaceTracedUpdate=WorkspaceTracedUpdate,
    ErrorInfo=ErrorInfo,
    CompileError=CompileError,
    RuntimeError=RuntimeError,
    InternalError=InternalError,
)
SubmissionStatusV2.update_forward_refs()
