# This file was auto-generated by Fern from our API Definition.

# type: ignore
# flake8: noqa
# fmt: off
# isort: skip_file

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from .lightweight_stackframe_information import LightweightStackframeInformation
from .submission_id import SubmissionId
from .traced_file import TracedFile


class RecordingResponseNotification(pydantic.BaseModel):
    submission_id: SubmissionId = pydantic.Field(alias="submissionId")
    test_case_id: typing.Optional[str] = pydantic.Field(alias="testCaseId")
    line_number: int = pydantic.Field(alias="lineNumber")
    lightweight_stack_info: LightweightStackframeInformation = pydantic.Field(alias="lightweightStackInfo")
    traced_file: typing.Optional[TracedFile] = pydantic.Field(alias="tracedFile")

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @RecordingResponseNotification.Validators.field("submission_id")
            def validate_submission_id(v: SubmissionId, values: RecordingResponseNotification.Partial) -> SubmissionId:
                ...

            @RecordingResponseNotification.Validators.field("test_case_id")
            def validate_test_case_id(v: typing.Optional[str], values: RecordingResponseNotification.Partial) -> typing.Optional[str]:
                ...

            @RecordingResponseNotification.Validators.field("line_number")
            def validate_line_number(v: int, values: RecordingResponseNotification.Partial) -> int:
                ...

            @RecordingResponseNotification.Validators.field("lightweight_stack_info")
            def validate_lightweight_stack_info(v: LightweightStackframeInformation, values: RecordingResponseNotification.Partial) -> LightweightStackframeInformation:
                ...

            @RecordingResponseNotification.Validators.field("traced_file")
            def validate_traced_file(v: typing.Optional[TracedFile], values: RecordingResponseNotification.Partial) -> typing.Optional[TracedFile]:
                ...
        """

        _submission_id_validators: typing.ClassVar[
            typing.List[RecordingResponseNotification.Validators.SubmissionIdValidator]
        ] = []
        _test_case_id_validators: typing.ClassVar[
            typing.List[RecordingResponseNotification.Validators.TestCaseIdValidator]
        ] = []
        _line_number_validators: typing.ClassVar[
            typing.List[RecordingResponseNotification.Validators.LineNumberValidator]
        ] = []
        _lightweight_stack_info_validators: typing.ClassVar[
            typing.List[RecordingResponseNotification.Validators.LightweightStackInfoValidator]
        ] = []
        _traced_file_validators: typing.ClassVar[
            typing.List[RecordingResponseNotification.Validators.TracedFileValidator]
        ] = []

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["submission_id"]
        ) -> typing.Callable[
            [RecordingResponseNotification.Validators.SubmissionIdValidator],
            RecordingResponseNotification.Validators.SubmissionIdValidator,
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["test_case_id"]
        ) -> typing.Callable[
            [RecordingResponseNotification.Validators.TestCaseIdValidator],
            RecordingResponseNotification.Validators.TestCaseIdValidator,
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["line_number"]
        ) -> typing.Callable[
            [RecordingResponseNotification.Validators.LineNumberValidator],
            RecordingResponseNotification.Validators.LineNumberValidator,
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["lightweight_stack_info"]
        ) -> typing.Callable[
            [RecordingResponseNotification.Validators.LightweightStackInfoValidator],
            RecordingResponseNotification.Validators.LightweightStackInfoValidator,
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["traced_file"]
        ) -> typing.Callable[
            [RecordingResponseNotification.Validators.TracedFileValidator],
            RecordingResponseNotification.Validators.TracedFileValidator,
        ]:
            ...

        @classmethod
        def field(cls, field_name: str) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "submission_id":
                    cls._submission_id_validators.append(validator)
                if field_name == "test_case_id":
                    cls._test_case_id_validators.append(validator)
                if field_name == "line_number":
                    cls._line_number_validators.append(validator)
                if field_name == "lightweight_stack_info":
                    cls._lightweight_stack_info_validators.append(validator)
                if field_name == "traced_file":
                    cls._traced_file_validators.append(validator)
                return validator

            return decorator

        class SubmissionIdValidator(typing_extensions.Protocol):
            def __call__(self, v: SubmissionId, *, values: RecordingResponseNotification.Partial) -> SubmissionId:
                ...

        class TestCaseIdValidator(typing_extensions.Protocol):
            def __call__(
                self, v: typing.Optional[str], *, values: RecordingResponseNotification.Partial
            ) -> typing.Optional[str]:
                ...

        class LineNumberValidator(typing_extensions.Protocol):
            def __call__(self, v: int, *, values: RecordingResponseNotification.Partial) -> int:
                ...

        class LightweightStackInfoValidator(typing_extensions.Protocol):
            def __call__(
                self, v: LightweightStackframeInformation, *, values: RecordingResponseNotification.Partial
            ) -> LightweightStackframeInformation:
                ...

        class TracedFileValidator(typing_extensions.Protocol):
            def __call__(
                self, v: typing.Optional[TracedFile], *, values: RecordingResponseNotification.Partial
            ) -> typing.Optional[TracedFile]:
                ...

    @pydantic.validator("submission_id")
    def _validate_submission_id(cls, v: SubmissionId, values: SubmissionId) -> SubmissionId:
        for validator in RecordingResponseNotification.Validators._submission_id_validators:
            v = validator(v, values=values)
        return v

    @pydantic.validator("test_case_id")
    def _validate_test_case_id(cls, v: typing.Optional[str], values: typing.Optional[str]) -> typing.Optional[str]:
        for validator in RecordingResponseNotification.Validators._test_case_id_validators:
            v = validator(v, values=values)
        return v

    @pydantic.validator("line_number")
    def _validate_line_number(cls, v: int, values: int) -> int:
        for validator in RecordingResponseNotification.Validators._line_number_validators:
            v = validator(v, values=values)
        return v

    @pydantic.validator("lightweight_stack_info")
    def _validate_lightweight_stack_info(
        cls, v: LightweightStackframeInformation, values: LightweightStackframeInformation
    ) -> LightweightStackframeInformation:
        for validator in RecordingResponseNotification.Validators._lightweight_stack_info_validators:
            v = validator(v, values=values)
        return v

    @pydantic.validator("traced_file")
    def _validate_traced_file(
        cls, v: typing.Optional[TracedFile], values: typing.Optional[TracedFile]
    ) -> typing.Optional[TracedFile]:
        for validator in RecordingResponseNotification.Validators._traced_file_validators:
            v = validator(v, values=values)
        return v

    class Partial(typing.TypedDict):
        submission_id: typing_extensions.NotRequired[SubmissionId]
        test_case_id: typing_extensions.NotRequired[typing.Optional[str]]
        line_number: typing_extensions.NotRequired[int]
        lightweight_stack_info: typing_extensions.NotRequired[LightweightStackframeInformation]
        traced_file: typing_extensions.NotRequired[typing.Optional[TracedFile]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
