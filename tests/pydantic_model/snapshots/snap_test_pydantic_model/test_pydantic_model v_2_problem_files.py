# This file was auto-generated by Fern from our API Definition.

# flake8: noqa
# fmt: off
# isort: skip_file

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from .file_info_v_2 import FileInfoV2


class Files(pydantic.BaseModel):
    files: typing.List[FileInfoV2]

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @Files.Validators.root
            def validate(values: Files.Partial) -> Files.Partial:
                ...

            @Files.Validators.field("files")
            def validate_files(v: typing.List[FileInfoV2], values: Files.Partial) -> typing.List[FileInfoV2]:
                ...
        """

        _validators: typing.ClassVar[typing.List[typing.Callable[[Files.Partial], Files.Partial]]] = []
        _files_validators: typing.ClassVar[typing.List[Files.Validators.FilesValidator]] = []

        @classmethod
        def root(
            cls, validator: typing.Callable[[Files.Partial], Files.Partial]
        ) -> typing.Callable[[Files.Partial], Files.Partial]:
            cls._validators.append(validator)
            return validator

        @typing.overload  # type: ignore
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["files"]
        ) -> typing.Callable[[Files.Validators.FilesValidator], Files.Validators.FilesValidator]:
            ...

        @classmethod
        def field(cls, field_name: str) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "files":
                    cls._files_validators.append(validator)
                return validator

            return decorator

        class FilesValidator(typing_extensions.Protocol):
            def __call__(self, v: typing.List[FileInfoV2], *, values: Files.Partial) -> typing.List[FileInfoV2]:
                ...

    @pydantic.root_validator
    def _validate(cls, values: Files.Partial) -> Files.Partial:
        for validator in Files.Validators._validators:
            values = validator(values)
        return values

    @pydantic.validator("files")
    def _validate_files(cls, v: typing.List[FileInfoV2], values: Files.Partial) -> typing.List[FileInfoV2]:
        for validator in Files.Validators._files_validators:
            v = validator(v, values=values)
        return v

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
