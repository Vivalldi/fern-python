# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

import pydantic
import typing_extensions

from ...core.datetime_utils import serialize_datetime
from ..commons.problem_id import ProblemId


class UpdatePlaylistRequest(pydantic.BaseModel):
    name: str
    problems: typing.List[ProblemId] = pydantic.Field(description=("The problems that make up the playlist.\n"))

    class Partial(typing_extensions.TypedDict):
        name: typing_extensions.NotRequired[str]
        problems: typing_extensions.NotRequired[typing.List[ProblemId]]

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @UpdatePlaylistRequest.Validators.root()
            def validate(values: UpdatePlaylistRequest.Partial) -> UpdatePlaylistRequest.Partial:
                ...

            @UpdatePlaylistRequest.Validators.field("name")
            def validate_name(name: str, values: UpdatePlaylistRequest.Partial) -> str:
                ...

            @UpdatePlaylistRequest.Validators.field("problems")
            def validate_problems(problems: typing.List[ProblemId], values: UpdatePlaylistRequest.Partial) -> typing.List[ProblemId]:
                ...
        """

        _pre_validators: typing.ClassVar[typing.List[UpdatePlaylistRequest.Validators._PreRootValidator]] = []
        _post_validators: typing.ClassVar[typing.List[UpdatePlaylistRequest.Validators._RootValidator]] = []
        _name_pre_validators: typing.ClassVar[typing.List[UpdatePlaylistRequest.Validators.PreNameValidator]] = []
        _name_post_validators: typing.ClassVar[typing.List[UpdatePlaylistRequest.Validators.NameValidator]] = []
        _problems_pre_validators: typing.ClassVar[
            typing.List[UpdatePlaylistRequest.Validators.PreProblemsValidator]
        ] = []
        _problems_post_validators: typing.ClassVar[typing.List[UpdatePlaylistRequest.Validators.ProblemsValidator]] = []

        @typing.overload
        @classmethod
        def root(
            cls, *, pre: typing_extensions.Literal[False] = False
        ) -> typing.Callable[
            [UpdatePlaylistRequest.Validators._RootValidator], UpdatePlaylistRequest.Validators._RootValidator
        ]:
            ...

        @typing.overload
        @classmethod
        def root(
            cls, *, pre: typing_extensions.Literal[True]
        ) -> typing.Callable[
            [UpdatePlaylistRequest.Validators._PreRootValidator], UpdatePlaylistRequest.Validators._PreRootValidator
        ]:
            ...

        @classmethod
        def root(cls, *, pre: bool = False) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if pre:
                    cls._pre_validators.append(validator)
                else:
                    cls._post_validators.append(validator)
                return validator

            return decorator

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["name"], *, pre: typing_extensions.Literal[True]
        ) -> typing.Callable[
            [UpdatePlaylistRequest.Validators.PreNameValidator], UpdatePlaylistRequest.Validators.PreNameValidator
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["name"], *, pre: typing_extensions.Literal[False] = False
        ) -> typing.Callable[
            [UpdatePlaylistRequest.Validators.NameValidator], UpdatePlaylistRequest.Validators.NameValidator
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["problems"], *, pre: typing_extensions.Literal[True]
        ) -> typing.Callable[
            [UpdatePlaylistRequest.Validators.PreProblemsValidator],
            UpdatePlaylistRequest.Validators.PreProblemsValidator,
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["problems"], *, pre: typing_extensions.Literal[False] = False
        ) -> typing.Callable[
            [UpdatePlaylistRequest.Validators.ProblemsValidator], UpdatePlaylistRequest.Validators.ProblemsValidator
        ]:
            ...

        @classmethod
        def field(cls, field_name: str, *, pre: bool = False) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "name":
                    if pre:
                        cls._name_pre_validators.append(validator)
                    else:
                        cls._name_post_validators.append(validator)
                if field_name == "problems":
                    if pre:
                        cls._problems_pre_validators.append(validator)
                    else:
                        cls._problems_post_validators.append(validator)
                return validator

            return decorator

        class PreNameValidator(typing_extensions.Protocol):
            def __call__(self, __v: typing.Any, __values: UpdatePlaylistRequest.Partial) -> typing.Any:
                ...

        class NameValidator(typing_extensions.Protocol):
            def __call__(self, __v: str, __values: UpdatePlaylistRequest.Partial) -> str:
                ...

        class PreProblemsValidator(typing_extensions.Protocol):
            def __call__(self, __v: typing.Any, __values: UpdatePlaylistRequest.Partial) -> typing.Any:
                ...

        class ProblemsValidator(typing_extensions.Protocol):
            def __call__(
                self, __v: typing.List[ProblemId], __values: UpdatePlaylistRequest.Partial
            ) -> typing.List[ProblemId]:
                ...

        class _PreRootValidator(typing_extensions.Protocol):
            def __call__(self, __values: typing.Any) -> typing.Any:
                ...

        class _RootValidator(typing_extensions.Protocol):
            def __call__(self, __values: UpdatePlaylistRequest.Partial) -> UpdatePlaylistRequest.Partial:
                ...

    @pydantic.root_validator(pre=True)
    def _preupdate_playlist_request_validate(
        cls, values: UpdatePlaylistRequest.Partial
    ) -> UpdatePlaylistRequest.Partial:
        for validator in UpdatePlaylistRequest.Validators._pre_validators:
            values = validator(values)
        return values

    @pydantic.root_validator(pre=False)
    def _postupdate_playlist_request_validate(
        cls, values: UpdatePlaylistRequest.Partial
    ) -> UpdatePlaylistRequest.Partial:
        for validator in UpdatePlaylistRequest.Validators._post_validators:
            values = validator(values)
        return values

    @pydantic.validator("name", pre=True)
    def _pre_validate_name(cls, v: str, values: UpdatePlaylistRequest.Partial) -> str:
        for validator in UpdatePlaylistRequest.Validators._name_pre_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("name", pre=False)
    def _post_validate_name(cls, v: str, values: UpdatePlaylistRequest.Partial) -> str:
        for validator in UpdatePlaylistRequest.Validators._name_post_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("problems", pre=True)
    def _pre_validate_problems(
        cls, v: typing.List[ProblemId], values: UpdatePlaylistRequest.Partial
    ) -> typing.List[ProblemId]:
        for validator in UpdatePlaylistRequest.Validators._problems_pre_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("problems", pre=False)
    def _post_validate_problems(
        cls, v: typing.List[ProblemId], values: UpdatePlaylistRequest.Partial
    ) -> typing.List[ProblemId]:
        for validator in UpdatePlaylistRequest.Validators._problems_post_validators:
            v = validator(v, values)
        return v

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        json_encoders = {dt.datetime: serialize_datetime}
