# This file was auto-generated by Fern from our API Definition.

# flake8: noqa
# fmt: off
# isort: skip_file

import abc
import functools
import inspect
import typing

import fastapi

from ...core.abstract_fern_service import AbstractFernService
from ...core.exceptions import FernHTTPException
from ...core.route_args import get_route_args
from .types.create_problem_request import CreateProblemRequest
from .types.create_problem_response import CreateProblemResponse
from .types.get_default_starter_files_request import GetDefaultStarterFilesRequest
from .types.get_default_starter_files_response import GetDefaultStarterFilesResponse
from .types.update_problem_response import UpdateProblemResponse


class AbstractProblemCrudService(AbstractFernService):
    """
    AbstractProblemCrudService is an abstract class containing the methods that your
    ProblemCrudService implementation should implement.

    Each method is associated with an API route, which will be registered
    with FastAPI when you register your implementation using Fern's register()
    function.
    """

    @abc.abstractmethod
    def create_problem(self, *, body: CreateProblemRequest) -> CreateProblemResponse:
        ...

    @abc.abstractmethod
    def update_problem(self, *, body: CreateProblemRequest, problem_id: str) -> UpdateProblemResponse:
        ...

    @abc.abstractmethod
    def delete_problem(self, *, problem_id: str) -> None:
        ...

    @abc.abstractmethod
    def get_default_starter_files(self, *, body: GetDefaultStarterFilesRequest) -> GetDefaultStarterFilesResponse:
        ...

    """
    Below are internal methods used by Fern to register your implementation.
    You can ignore them.
    """

    @classmethod
    def _init_fern(cls, router: fastapi.APIRouter) -> None:
        cls.__init_create_problem(router=router)
        cls.__init_update_problem(router=router)
        cls.__init_delete_problem(router=router)
        cls.__init_get_default_starter_files(router=router)

    @classmethod
    def __init_create_problem(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.create_problem)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "body":
                new_parameters.append(parameter.replace(default=fastapi.Body(...)))
            else:
                new_parameters.append(parameter)
        setattr(cls.create_problem, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.create_problem)
        def wrapper(*args, **kwargs: typing.Any) -> CreateProblemResponse:
            try:
                return cls.__init_create_problem(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(__name__).warn(
                    f"create_problem unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "create_problem's errors list in your Fern Definition."
                )
                raise e

        router.post(  # type: ignore
            path="/problem-crud/create", response_model=CreateProblemResponse, **get_route_args(cls.create_problem)
        )(wrapper)

    @classmethod
    def __init_update_problem(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.update_problem)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "body":
                new_parameters.append(parameter.replace(default=fastapi.Body(...)))
            elif parameter_name == "problem_id":
                new_parameters.append(parameter.replace(default=fastapi.Path(...)))
            else:
                new_parameters.append(parameter)
        setattr(cls.update_problem, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.update_problem)
        def wrapper(*args, **kwargs: typing.Any) -> UpdateProblemResponse:
            try:
                return cls.__init_update_problem(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(__name__).warn(
                    f"update_problem unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "update_problem's errors list in your Fern Definition."
                )
                raise e

        router.post(  # type: ignore
            path="/problem-crud/update/{problem_id}",
            response_model=UpdateProblemResponse,
            **get_route_args(cls.update_problem),
        )(wrapper)

    @classmethod
    def __init_delete_problem(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.delete_problem)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "problem_id":
                new_parameters.append(parameter.replace(default=fastapi.Path(...)))
            else:
                new_parameters.append(parameter)
        setattr(cls.delete_problem, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.delete_problem)
        def wrapper(*args, **kwargs: typing.Any) -> None:
            try:
                return cls.__init_delete_problem(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(__name__).warn(
                    f"delete_problem unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "delete_problem's errors list in your Fern Definition."
                )
                raise e

        router.delete(path="/problem-crud/delete/{problem_id}", **get_route_args(cls.delete_problem))(  # type: ignore
            wrapper
        )

    @classmethod
    def __init_get_default_starter_files(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.get_default_starter_files)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "body":
                new_parameters.append(parameter.replace(default=fastapi.Body(...)))
            else:
                new_parameters.append(parameter)
        setattr(cls.get_default_starter_files, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.get_default_starter_files)
        def wrapper(*args, **kwargs: typing.Any) -> GetDefaultStarterFilesResponse:
            try:
                return cls.__init_get_default_starter_files(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(__name__).warn(
                    f"get_default_starter_files unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "get_default_starter_files's errors list in your Fern Definition."
                )
                raise e

        router.post(  # type: ignore
            path="/problem-crud/default-starter-files",
            response_model=GetDefaultStarterFilesResponse,
            **get_route_args(cls.get_default_starter_files),
        )(wrapper)
