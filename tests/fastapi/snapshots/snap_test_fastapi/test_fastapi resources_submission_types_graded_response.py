# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from .submission_id import SubmissionId
from .test_case_result_with_stdout import TestCaseResultWithStdout


class GradedResponse(pydantic.BaseModel):
    submission_id: SubmissionId = pydantic.Field(alias="submissionId")
    test_cases: typing.Dict[str, TestCaseResultWithStdout] = pydantic.Field(alias="testCases")

    class Partial(typing_extensions.TypedDict):
        submission_id: typing_extensions.NotRequired[SubmissionId]
        test_cases: typing_extensions.NotRequired[typing.Dict[str, TestCaseResultWithStdout]]

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @GradedResponse.Validators.root
            def validate(values: GradedResponse.Partial) -> GradedResponse.Partial:
                ...

            @GradedResponse.Validators.field("submission_id")
            def validate_submission_id(submission_id: SubmissionId, values: GradedResponse.Partial) -> SubmissionId:
                ...

            @GradedResponse.Validators.field("test_cases")
            def validate_test_cases(test_cases: typing.Dict[str, TestCaseResultWithStdout], values: GradedResponse.Partial) -> typing.Dict[str, TestCaseResultWithStdout]:
                ...
        """

        _validators: typing.ClassVar[
            typing.List[typing.Callable[[GradedResponse.Partial], GradedResponse.Partial]]
        ] = []
        _submission_id_validators: typing.ClassVar[typing.List[GradedResponse.Validators.SubmissionIdValidator]] = []
        _test_cases_validators: typing.ClassVar[typing.List[GradedResponse.Validators.TestCasesValidator]] = []

        @classmethod
        def root(
            cls, validator: typing.Callable[[GradedResponse.Partial], GradedResponse.Partial]
        ) -> typing.Callable[[GradedResponse.Partial], GradedResponse.Partial]:
            cls._validators.append(validator)
            return validator

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["submission_id"]
        ) -> typing.Callable[
            [GradedResponse.Validators.SubmissionIdValidator], GradedResponse.Validators.SubmissionIdValidator
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["test_cases"]
        ) -> typing.Callable[
            [GradedResponse.Validators.TestCasesValidator], GradedResponse.Validators.TestCasesValidator
        ]:
            ...

        @classmethod
        def field(cls, field_name: str) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "submission_id":
                    cls._submission_id_validators.append(validator)
                if field_name == "test_cases":
                    cls._test_cases_validators.append(validator)
                return validator

            return decorator

        class SubmissionIdValidator(typing_extensions.Protocol):
            def __call__(self, __v: SubmissionId, __values: GradedResponse.Partial) -> SubmissionId:
                ...

        class TestCasesValidator(typing_extensions.Protocol):
            def __call__(
                self, __v: typing.Dict[str, TestCaseResultWithStdout], __values: GradedResponse.Partial
            ) -> typing.Dict[str, TestCaseResultWithStdout]:
                ...

    @pydantic.root_validator
    def _validate(cls, values: GradedResponse.Partial) -> GradedResponse.Partial:
        for validator in GradedResponse.Validators._validators:
            values = validator(values)
        return values

    @pydantic.validator("submission_id")
    def _validate_submission_id(cls, v: SubmissionId, values: GradedResponse.Partial) -> SubmissionId:
        for validator in GradedResponse.Validators._submission_id_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("test_cases")
    def _validate_test_cases(
        cls, v: typing.Dict[str, TestCaseResultWithStdout], values: GradedResponse.Partial
    ) -> typing.Dict[str, TestCaseResultWithStdout]:
        for validator in GradedResponse.Validators._test_cases_validators:
            v = validator(v, values)
        return v

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
