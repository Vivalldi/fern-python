# This file was auto-generated by Fern from our API Definition.

# flake8: noqa
# fmt: off
# isort: skip_file

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from .exception_info import ExceptionInfo


class InternalError(pydantic.BaseModel):
    exception_info: ExceptionInfo = pydantic.Field(alias="exceptionInfo")

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @InternalError.Validators.root
            def validate(values: InternalError.Partial) -> InternalError.Partial:
                ...

            @InternalError.Validators.field("exception_info")
            def validate_exception_info(v: ExceptionInfo, values: InternalError.Partial) -> ExceptionInfo:
                ...
        """

        _validators: typing.ClassVar[typing.List[typing.Callable[[InternalError.Partial], InternalError.Partial]]] = []
        _exception_info_validators: typing.ClassVar[typing.List[InternalError.Validators.ExceptionInfoValidator]] = []

        @classmethod
        def root(
            cls, validator: typing.Callable[[InternalError.Partial], InternalError.Partial]
        ) -> typing.Callable[[InternalError.Partial], InternalError.Partial]:
            cls._validators.append(validator)
            return validator

        @typing.overload  # type: ignore
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["exception_info"]
        ) -> typing.Callable[
            [InternalError.Validators.ExceptionInfoValidator], InternalError.Validators.ExceptionInfoValidator
        ]:
            ...

        @classmethod
        def field(cls, field_name: str) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "exception_info":
                    cls._exception_info_validators.append(validator)
                return validator

            return decorator

        class ExceptionInfoValidator(typing_extensions.Protocol):
            def __call__(self, v: ExceptionInfo, *, values: InternalError.Partial) -> ExceptionInfo:
                ...

    @pydantic.root_validator
    def _validate(cls, values: InternalError.Partial) -> InternalError.Partial:
        for validator in InternalError.Validators._validators:
            values = validator(values)
        return values

    @pydantic.validator("exception_info")
    def _validate_exception_info(cls, v: ExceptionInfo, values: InternalError.Partial) -> ExceptionInfo:
        for validator in InternalError.Validators._exception_info_validators:
            v = validator(v, values=values)
        return v

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Partial(typing_extensions.TypedDict):
        exception_info: typing_extensions.NotRequired[ExceptionInfo]

    class Config:
        frozen = True
        allow_population_by_field_name = True
