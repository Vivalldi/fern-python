# This file was auto-generated by Fern from our API Definition.

# type: ignore
# flake8: noqa
# fmt: off
# isort: skip_file

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from .node_id import NodeId


class SinglyLinkedListNodeValue(pydantic.BaseModel):
    node_id: NodeId = pydantic.Field(alias="nodeId")
    val: float
    next: typing.Optional[NodeId]

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @SinglyLinkedListNodeValue.Validators.field("node_id")
            def validate_node_id(v: NodeId, values: SinglyLinkedListNodeValue.Partial) -> NodeId:
                ...

            @SinglyLinkedListNodeValue.Validators.field("val")
            def validate_val(v: float, values: SinglyLinkedListNodeValue.Partial) -> float:
                ...

            @SinglyLinkedListNodeValue.Validators.field("next")
            def validate_next(v: typing.Optional[NodeId], values: SinglyLinkedListNodeValue.Partial) -> typing.Optional[NodeId]:
                ...
        """

        _node_id_validators: typing.ClassVar[typing.List[SinglyLinkedListNodeValue.Validators.NodeIdValidator]] = []
        _val_validators: typing.ClassVar[typing.List[SinglyLinkedListNodeValue.Validators.ValValidator]] = []
        _next_validators: typing.ClassVar[typing.List[SinglyLinkedListNodeValue.Validators.NextValidator]] = []

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["node_id"]
        ) -> typing.Callable[
            [SinglyLinkedListNodeValue.Validators.NodeIdValidator], SinglyLinkedListNodeValue.Validators.NodeIdValidator
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["val"]
        ) -> typing.Callable[
            [SinglyLinkedListNodeValue.Validators.ValValidator], SinglyLinkedListNodeValue.Validators.ValValidator
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["next"]
        ) -> typing.Callable[
            [SinglyLinkedListNodeValue.Validators.NextValidator], SinglyLinkedListNodeValue.Validators.NextValidator
        ]:
            ...

        @classmethod
        def field(cls, field_name: str) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "node_id":
                    cls._node_id_validators.append(validator)
                if field_name == "val":
                    cls._val_validators.append(validator)
                if field_name == "next":
                    cls._next_validators.append(validator)
                return validator

            return decorator

        class NodeIdValidator(typing_extensions.Protocol):
            def __call__(self, v: NodeId, *, values: SinglyLinkedListNodeValue.Partial) -> NodeId:
                ...

        class ValValidator(typing_extensions.Protocol):
            def __call__(self, v: float, *, values: SinglyLinkedListNodeValue.Partial) -> float:
                ...

        class NextValidator(typing_extensions.Protocol):
            def __call__(
                self, v: typing.Optional[NodeId], *, values: SinglyLinkedListNodeValue.Partial
            ) -> typing.Optional[NodeId]:
                ...

    @pydantic.validator("node_id")
    def _validate_node_id(cls, v: NodeId, values: NodeId) -> NodeId:
        for validator in SinglyLinkedListNodeValue.Validators._node_id_validators:
            v = validator(v, values=values)
        return v

    @pydantic.validator("val")
    def _validate_val(cls, v: float, values: float) -> float:
        for validator in SinglyLinkedListNodeValue.Validators._val_validators:
            v = validator(v, values=values)
        return v

    @pydantic.validator("next")
    def _validate_next(cls, v: typing.Optional[NodeId], values: typing.Optional[NodeId]) -> typing.Optional[NodeId]:
        for validator in SinglyLinkedListNodeValue.Validators._next_validators:
            v = validator(v, values=values)
        return v

    class Partial(typing.TypedDict):
        node_id: typing_extensions.NotRequired[NodeId]
        val: typing_extensions.NotRequired[float]
        next: typing_extensions.NotRequired[typing.Optional[NodeId]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
