# This file was auto-generated by Fern from our API Definition.

# flake8: noqa
# fmt: off
# isort: skip_file

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from .test_case_implementation_description_board import TestCaseImplementationDescriptionBoard


class TestCaseImplementationDescription(pydantic.BaseModel):
    boards: typing.List[TestCaseImplementationDescriptionBoard]

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @TestCaseImplementationDescription.Validators.root
            def validate(values: TestCaseImplementationDescription.Partial) -> TestCaseImplementationDescription.Partial:
                ...

            @TestCaseImplementationDescription.Validators.field("boards")
            def validate_boards(v: typing.List[TestCaseImplementationDescriptionBoard], values: TestCaseImplementationDescription.Partial) -> typing.List[TestCaseImplementationDescriptionBoard]:
                ...
        """

        _validators: typing.ClassVar[
            typing.List[
                typing.Callable[[TestCaseImplementationDescription.Partial], TestCaseImplementationDescription.Partial]
            ]
        ] = []
        _boards_validators: typing.ClassVar[
            typing.List[TestCaseImplementationDescription.Validators.BoardsValidator]
        ] = []

        @classmethod
        def root(
            cls,
            validator: typing.Callable[
                [TestCaseImplementationDescription.Partial], TestCaseImplementationDescription.Partial
            ],
        ) -> typing.Callable[[TestCaseImplementationDescription.Partial], TestCaseImplementationDescription.Partial]:
            cls._validators.append(validator)
            return validator

        @typing.overload  # type: ignore
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["boards"]
        ) -> typing.Callable[
            [TestCaseImplementationDescription.Validators.BoardsValidator],
            TestCaseImplementationDescription.Validators.BoardsValidator,
        ]:
            ...

        @classmethod
        def field(cls, field_name: str) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "boards":
                    cls._boards_validators.append(validator)
                return validator

            return decorator

        class BoardsValidator(typing_extensions.Protocol):
            def __call__(
                self,
                v: typing.List[TestCaseImplementationDescriptionBoard],
                *,
                values: TestCaseImplementationDescription.Partial,
            ) -> typing.List[TestCaseImplementationDescriptionBoard]:
                ...

    @pydantic.root_validator
    def _validate(cls, values: TestCaseImplementationDescription.Partial) -> TestCaseImplementationDescription.Partial:
        for validator in TestCaseImplementationDescription.Validators._validators:
            values = validator(values)
        return values

    @pydantic.validator("boards")
    def _validate_boards(
        cls, v: typing.List[TestCaseImplementationDescriptionBoard], values: TestCaseImplementationDescription.Partial
    ) -> typing.List[TestCaseImplementationDescriptionBoard]:
        for validator in TestCaseImplementationDescription.Validators._boards_validators:
            v = validator(v, values=values)
        return v

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Partial(typing_extensions.TypedDict):
        boards: typing_extensions.NotRequired[typing.List[TestCaseImplementationDescriptionBoard]]

    class Config:
        frozen = True
