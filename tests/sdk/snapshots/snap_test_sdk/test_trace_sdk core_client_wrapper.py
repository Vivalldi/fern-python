# This file was auto-generated by Fern from our API Definition.

import typing

import httpx


class BaseClientWrapper:
    def __init__(
        self,
        *,
        x_random_header: typing.Optional[str] = None,
        token: typing.Optional[typing.Callable[[str], typing.Callable[[], str]]] = None
    ):
        self._x_random_header = x_random_header
        self._token = token

    def _get_token(self) -> str:
        if isinstance(self._token, str):
            return self._token
        else:
            return self._token()

    def get_headers(self) -> typing.Dict[str, str]:
        self._x_random_header = x_random_header
        self._token = token


class SyncClientWrapper(BaseClientWrapper):
    def __init__(
        self,
        *,
        x_random_header: typing.Optional[str] = None,
        token: typing.Optional[typing.Callable[[str], typing.Callable[[], str]]] = None,
        httpx_client: httpx.Client
    ):
        super().__init__(x_random_header, token)
        self.httpx_client = httpx_client


class AsyncClientWrapper(BaseClientWrapper):
    def __init__(
        self,
        *,
        x_random_header: typing.Optional[str] = None,
        token: typing.Optional[typing.Callable[[str], typing.Callable[[], str]]] = None,
        httpx_client: httpx.AsyncClient
    ):
        super().__init__(x_random_header, token)
        self.httpx_client = httpx_client
