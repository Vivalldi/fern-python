# This file was auto-generated by Fern from our API Definition.

from json.decoder import JSONDecodeError

import httpx

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...environment import FernIrEnvironment
from .resources.problem.client import AsyncProblemClient, ProblemClient
from .resources.v_3.client import AsyncV3Client, V3Client


class V2Client:
    def __init__(self, *, environment: FernIrEnvironment = FernIrEnvironment.PROD, client_wrapper: SyncClientWrapper):
        self._environment = environment
        self._client_wrapper = client_wrapper
        self.problem = ProblemClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.v_3 = V3Client(environment=self._environment, client_wrapper=self._client_wrapper)

    def test(self) -> None:
        _response = httpx.request(
            "GET", self._environment.value, headers=self._client_wrapper.get_headers(), timeout=None
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncV2Client:
    def __init__(self, *, environment: FernIrEnvironment = FernIrEnvironment.PROD, client_wrapper: AsyncClientWrapper):
        self._environment = environment
        self._client_wrapper = client_wrapper
        self.problem = AsyncProblemClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.v_3 = AsyncV3Client(environment=self._environment, client_wrapper=self._client_wrapper)

    async def test(self) -> None:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET", self._environment.value, headers=self._client_wrapper.get_headers(), timeout=None
            )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
