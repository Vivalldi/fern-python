# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.datetime_utils import serialize_datetime
from ...core.jsonable_encoder import jsonable_encoder
from ...environment import FernIrEnvironment
from .errors.playlist_id_not_found_error import PlaylistIdNotFoundError
from .errors.unauthorized_error import UnauthorizedError
from .types.playlist import Playlist
from .types.playlist_create_request import PlaylistCreateRequest
from .types.playlist_id import PlaylistId
from .types.playlist_id_not_found_error_body import PlaylistIdNotFoundErrorBody
from .types.update_playlist_request import UpdatePlaylistRequest

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PlaylistClient:
    def __init__(self, *, environment: FernIrEnvironment = FernIrEnvironment.PROD, client_wrapper: SyncClientWrapper):
        self._environment = environment
        self._client_wrapper = client_wrapper

    def create_playlist(
        self,
        service_param: int,
        *,
        datetime: dt.datetime,
        optional_datetime: typing.Optional[dt.datetime] = None,
        request: PlaylistCreateRequest,
    ) -> Playlist:
        params = {
            "datetime": serialize_datetime(datetime),
            "optionalDatetime": serialize_datetime(optional_datetime) if optional_datetime is not None else None,
        }
        if optional_datetime is None:
            del params["optionalDatetime"]
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", f"v2/playlist/{service_param}/create"),
            params=params,
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=None,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Playlist, _response_json)  # type: ignore
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_playlists(
        self,
        service_param: int,
        *,
        limit: typing.Optional[int] = None,
        other_field: str,
        multi_line_docs: str,
        optional_multiple_field: typing.Union[typing.Optional[str], typing.List[str]],
        multiple_field: typing.Union[str, typing.List[str]],
    ) -> typing.List[Playlist]:
        params = {
            "limit": limit,
            "otherField": other_field,
            "multiLineDocs": multi_line_docs,
            "optionalMultipleField": optional_multiple_field,
            "multipleField": multiple_field,
        }
        if limit is None:
            del params["limit"]
        if optional_multiple_field is None:
            del params["optionalMultipleField"]
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"v2/playlist/{service_param}/all"),
            params=params,
            headers=self._client_wrapper.get_headers(),
            timeout=None,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[Playlist], _response_json)  # type: ignore
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_playlist(self, service_param: int, playlist_id: PlaylistId) -> Playlist:
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"v2/playlist/{service_param}/{playlist_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=None,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Playlist, _response_json)  # type: ignore
        if "errorName" in _response_json:
            if _response_json["errorName"] == "PlaylistIdNotFoundError":
                raise PlaylistIdNotFoundError(
                    pydantic.parse_obj_as(PlaylistIdNotFoundErrorBody, _response_json["content"])  # type: ignore
                )
            if _response_json["errorName"] == "UnauthorizedError":
                raise UnauthorizedError()
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_playlist(
        self, service_param: int, playlist_id: PlaylistId, *, request: typing.Optional[UpdatePlaylistRequest] = None
    ) -> typing.Optional[Playlist]:
        _response = self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._environment.value}/", f"v2/playlist/{service_param}/{playlist_id}"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=None,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Optional[Playlist], _response_json)  # type: ignore
        if "errorName" in _response_json:
            if _response_json["errorName"] == "PlaylistIdNotFoundError":
                raise PlaylistIdNotFoundError(
                    pydantic.parse_obj_as(PlaylistIdNotFoundErrorBody, _response_json["content"])  # type: ignore
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_playlist(self, service_param: int, playlist_id: PlaylistId) -> None:
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._environment.value}/", f"v2/playlist/{service_param}/{playlist_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPlaylistClient:
    def __init__(self, *, environment: FernIrEnvironment = FernIrEnvironment.PROD, client_wrapper: AsyncClientWrapper):
        self._environment = environment
        self._client_wrapper = client_wrapper

    async def create_playlist(
        self,
        service_param: int,
        *,
        datetime: dt.datetime,
        optional_datetime: typing.Optional[dt.datetime] = None,
        request: PlaylistCreateRequest,
    ) -> Playlist:
        params = {
            "datetime": serialize_datetime(datetime),
            "optionalDatetime": serialize_datetime(optional_datetime) if optional_datetime is not None else None,
        }
        if optional_datetime is None:
            del params["optionalDatetime"]
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", f"v2/playlist/{service_param}/create"),
            params=params,
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=None,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Playlist, _response_json)  # type: ignore
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_playlists(
        self,
        service_param: int,
        *,
        limit: typing.Optional[int] = None,
        other_field: str,
        multi_line_docs: str,
        optional_multiple_field: typing.Union[typing.Optional[str], typing.List[str]],
        multiple_field: typing.Union[str, typing.List[str]],
    ) -> typing.List[Playlist]:
        params = {
            "limit": limit,
            "otherField": other_field,
            "multiLineDocs": multi_line_docs,
            "optionalMultipleField": optional_multiple_field,
            "multipleField": multiple_field,
        }
        if limit is None:
            del params["limit"]
        if optional_multiple_field is None:
            del params["optionalMultipleField"]
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"v2/playlist/{service_param}/all"),
            params=params,
            headers=self._client_wrapper.get_headers(),
            timeout=None,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[Playlist], _response_json)  # type: ignore
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_playlist(self, service_param: int, playlist_id: PlaylistId) -> Playlist:
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"v2/playlist/{service_param}/{playlist_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=None,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Playlist, _response_json)  # type: ignore
        if "errorName" in _response_json:
            if _response_json["errorName"] == "PlaylistIdNotFoundError":
                raise PlaylistIdNotFoundError(
                    pydantic.parse_obj_as(PlaylistIdNotFoundErrorBody, _response_json["content"])  # type: ignore
                )
            if _response_json["errorName"] == "UnauthorizedError":
                raise UnauthorizedError()
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_playlist(
        self, service_param: int, playlist_id: PlaylistId, *, request: typing.Optional[UpdatePlaylistRequest] = None
    ) -> typing.Optional[Playlist]:
        _response = await self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._environment.value}/", f"v2/playlist/{service_param}/{playlist_id}"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=None,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Optional[Playlist], _response_json)  # type: ignore
        if "errorName" in _response_json:
            if _response_json["errorName"] == "PlaylistIdNotFoundError":
                raise PlaylistIdNotFoundError(
                    pydantic.parse_obj_as(PlaylistIdNotFoundErrorBody, _response_json["content"])  # type: ignore
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_playlist(self, service_param: int, playlist_id: PlaylistId) -> None:
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._environment.value}/", f"v2/playlist/{service_param}/{playlist_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
