# This file was auto-generated by Fern from our API Definition.

import typing

from backports.cached_property import cached_property

from .resources.admin.client import AdminClient
from .resources.homepage.client import HomepageClient
from .resources.migration.client import MigrationClient
from .resources.playlist.client import PlaylistClient
from .resources.problem.client import ProblemClient
from .resources.submission.client import SubmissionClient
from .resources.sysprop.client import SyspropClient
from .resources.v_2.client import V2Client


class FernIr:
    def __init__(
        self, *, environment: str, x_random_header: typing.Optional[str] = None, token: typing.Optional[str] = None
    ):
        self._environment = environment
        self.x_random_header = x_random_header
        self._token = token

    @cached_property
    def v_2(self) -> V2Client:
        return V2Client(environment=self._environment, x_random_header=self.x_random_header, token=self._token)

    @cached_property
    def admin(self) -> AdminClient:
        return AdminClient(environment=self._environment, x_random_header=self.x_random_header, token=self._token)

    @cached_property
    def homepage(self) -> HomepageClient:
        return HomepageClient(environment=self._environment, x_random_header=self.x_random_header, token=self._token)

    @cached_property
    def migration(self) -> MigrationClient:
        return MigrationClient(environment=self._environment, x_random_header=self.x_random_header, token=self._token)

    @cached_property
    def playlist(self) -> PlaylistClient:
        return PlaylistClient(environment=self._environment, x_random_header=self.x_random_header, token=self._token)

    @cached_property
    def problem(self) -> ProblemClient:
        return ProblemClient(environment=self._environment, x_random_header=self.x_random_header, token=self._token)

    @cached_property
    def submission(self) -> SubmissionClient:
        return SubmissionClient(environment=self._environment, x_random_header=self.x_random_header, token=self._token)

    @cached_property
    def sysprop(self) -> SyspropClient:
        return SyspropClient(environment=self._environment, x_random_header=self.x_random_header, token=self._token)
