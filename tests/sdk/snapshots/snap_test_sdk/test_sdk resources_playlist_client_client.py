# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import requests

from ..types.playlist import Playlist
from ..types.playlist_create_request import PlaylistCreateRequest
from ..types.playlist_id import PlaylistId
from ..types.update_playlist_request import UpdatePlaylistRequest


class Client:
    def __init__(self, *, environment: str):
        ...

    def create_playlist(self, *, service_param: int, request: PlaylistCreateRequest) -> Playlist:
        _response = requests.request("POST", "", json=request)
        return pydantic.parse_obj_as(Playlist, _response)  # type: ignore

    def get_playlists(
        self,
        *,
        service_param: int,
        limit: typing.Optional[int],
        other_field: str,
        multi_line_docs: str,
        optional_multiple_field: typing.Optional[str],
        multiple_field: str
    ) -> typing.List[Playlist]:
        _response = requests.request(
            "GET",
            "",
            params={
                "limit": limit,
                "otherField": other_field,
                "multiLineDocs": multi_line_docs,
                "optionalMultipleField": optional_multiple_field,
                "multipleField": multiple_field,
            },
        )
        return pydantic.parse_obj_as(typing.List[Playlist], _response)  # type: ignore

    def get_playlist(self, *, service_param: int, playlist_id: PlaylistId) -> Playlist:
        _response = requests.request("GET", "")
        return pydantic.parse_obj_as(Playlist, _response)  # type: ignore

    def update_playlist(
        self, *, service_param: int, playlist_id: PlaylistId, request: typing.Optional[UpdatePlaylistRequest]
    ) -> typing.Optional[Playlist]:
        _response = requests.request("PUT", "", json=request)
        return pydantic.parse_obj_as(typing.Optional[Playlist], _response)  # type: ignore

    def delete_playlist(self, *, service_param: int, playlist_id: PlaylistId) -> None:
        _response = requests.request("DELETE", "")
