# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

import pydantic
import typing_extensions

from ....core.datetime_utils import serialize_datetime
from .actress import Actress


class Base(pydantic.BaseModel):
    name: str

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}


class Person_Actor(Base):
    type: typing_extensions.Literal["actor"]
    value: str

    class Config:
        frozen = True
        allow_population_by_field_name = True


class Person_Actress(Actress, Base):
    type: typing_extensions.Literal["actress"]

    class Config:
        frozen = True
        allow_population_by_field_name = True


class Person_Director(Base):
    type: typing_extensions.Literal["director"]

    class Config:
        frozen = True
        allow_population_by_field_name = True


Person = typing.Union[Person_Actor, Person_Actress, Person_Director]
